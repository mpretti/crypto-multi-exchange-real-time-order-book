<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>📊 Crypto Historical Data Collection Dashboard</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.2/socket.io.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <script src="../../common-header.js"></script>
    <link rel="stylesheet" href="../../common-header-adjustments.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
</head>
<body data-header='{"currentPage": "historical"}' class="bg-gray-50 min-h-screen">
    <!-- Header -->
    <header class="bg-white shadow-sm border-b">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center py-3">
                <div class="flex items-center">
                    <i class="fas fa-database text-blue-600 text-xl mr-2"></i>
                    <h1 class="text-xl font-bold text-gray-900">📊 Historical Data Collection Dashboard</h1>
                </div>
                <div class="flex items-center space-x-4">
                    <div class="flex items-center text-sm text-gray-500">
                        <div class="w-2 h-2 bg-green-400 rounded-full mr-2"></div>
                        <span>System Online</span>
                    </div>
                    <a href="http://localhost:5173" target="_blank" 
                       class="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1.5 rounded-md text-sm font-medium transition-colors">
                        <i class="fas fa-external-link-alt mr-1"></i>Live Trading Dashboard
                    </a>
                </div>
            </div>
        </div>
    </header>

    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 pb-16">
        <!-- System Metrics -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
            <div class="bg-white rounded-lg shadow-md p-4 border-l-4 border-blue-500">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <i class="fas fa-file-alt text-blue-600 text-xl"></i>
                    </div>
                    <div class="ml-3">
                        <p class="text-xs font-medium text-gray-500">Total Files</p>
                        <p class="text-xl font-semibold text-gray-900" id="total-files"><%= stats.totalFiles.toLocaleString() %></p>
                    </div>
                </div>
            </div>

            <div class="bg-white rounded-lg shadow-md p-4 border-l-4 border-green-500">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <i class="fas fa-hdd text-green-600 text-xl"></i>
                    </div>
                    <div class="ml-3">
                        <p class="text-xs font-medium text-gray-500">Total Size</p>
                        <p class="text-xl font-semibold text-gray-900" id="total-size"><%= stats.totalSizeFormatted %></p>
                    </div>
                </div>
            </div>

            <div class="bg-white rounded-lg shadow-md p-4 border-l-4 border-yellow-500">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <i class="fas fa-cogs text-yellow-600 text-xl"></i>
                    </div>
                    <div class="ml-3">
                        <p class="text-xs font-medium text-gray-500">Active Collections</p>
                        <p class="text-xl font-semibold text-gray-900" id="active-collectors"><%= stats.activeCollectors %></p>
                    </div>
                </div>
            </div>

            <div class="bg-white rounded-lg shadow-md p-4 border-l-4 border-purple-500">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <i class="fas fa-clock text-purple-600 text-xl"></i>
                    </div>
                    <div class="ml-3">
                        <p class="text-xs font-medium text-gray-500">Uptime</p>
                        <p class="text-xl font-semibold text-gray-900" id="uptime"><%= stats.uptimeFormatted %></p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Calendar Data Coverage View -->
        <div class="bg-white rounded-lg shadow-md p-4 mb-6">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-lg font-semibold text-gray-900">
                    <i class="fas fa-calendar-check text-indigo-600 mr-2"></i>
                    Data Coverage Calendar
                </h2>
                <div class="flex items-center space-x-3">
                    <div class="flex items-center space-x-2">
                        <label for="calendar-asset" class="text-sm font-medium text-gray-700">Asset:</label>
                        <select id="calendar-asset" class="px-3 py-1.5 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500">
                            <option value="BTCUSDT">BTC/USDT</option>
                            <option value="ETHUSDT">ETH/USDT</option>
                            <option value="SOLUSDT">SOL/USDT</option>
                            <option value="ADAUSDT">ADA/USDT</option>
                            <option value="DOTUSDT">DOT/USDT</option>
                            <option value="AVAXUSDT">AVAX/USDT</option>
                            <option value="MATICUSDT">MATIC/USDT</option>
                        </select>
                    </div>
                    <div class="flex items-center space-x-2">
                        <label class="flex items-center space-x-2 cursor-pointer">
                            <span class="text-sm font-medium text-gray-700">Detailed View:</span>
                            <div class="relative">
                                <input type="checkbox" id="calendar-detailed-toggle" class="sr-only">
                                <div class="block bg-gray-300 w-10 h-6 rounded-full"></div>
                                <div class="dot absolute left-1 top-1 bg-white w-4 h-4 rounded-full transition"></div>
                            </div>
                        </label>
                    </div>
                    <div class="flex items-center space-x-2">
                        <button id="calendar-prev-month" class="px-2 py-1 text-sm bg-gray-200 hover:bg-gray-300 rounded-md transition-colors">
                            <i class="fas fa-chevron-left"></i>
                        </button>
                        <span id="calendar-month-year" class="text-sm font-medium text-gray-700 min-w-24 text-center"></span>
                        <button id="calendar-next-month" class="px-2 py-1 text-sm bg-gray-200 hover:bg-gray-300 rounded-md transition-colors">
                            <i class="fas fa-chevron-right"></i>
                        </button>
                    </div>
                </div>
            </div>
            
            <!-- Calendar Grid -->
            <div class="calendar-container">
                <div class="grid grid-cols-7 gap-1 mb-2">
                    <div class="text-center text-xs font-medium text-gray-500 py-2">Sun</div>
                    <div class="text-center text-xs font-medium text-gray-500 py-2">Mon</div>
                    <div class="text-center text-xs font-medium text-gray-500 py-2">Tue</div>
                    <div class="text-center text-xs font-medium text-gray-500 py-2">Wed</div>
                    <div class="text-center text-xs font-medium text-gray-500 py-2">Thu</div>
                    <div class="text-center text-xs font-medium text-gray-500 py-2">Fri</div>
                    <div class="text-center text-xs font-medium text-gray-500 py-2">Sat</div>
                </div>
                <div id="calendar-grid" class="grid grid-cols-7 gap-1">
                    <!-- Calendar days will be populated by JavaScript -->
                </div>
            </div>

            <!-- Legend -->
            <div class="mt-4 flex items-center justify-between">
                <div class="flex items-center space-x-4 text-xs">
                    <div class="flex items-center space-x-1">
                        <div class="w-3 h-3 bg-gray-200 rounded"></div>
                        <span class="text-gray-600">No Data</span>
                    </div>
                    <div class="flex items-center space-x-1">
                        <div class="w-3 h-3 bg-red-300 rounded"></div>
                        <span class="text-gray-600">Low (&lt;1K)</span>
                    </div>
                    <div class="flex items-center space-x-1">
                        <div class="w-3 h-3 bg-yellow-300 rounded"></div>
                        <span class="text-gray-600">Medium (1K-10K)</span>
                    </div>
                    <div class="flex items-center space-x-1">
                        <div class="w-3 h-3 bg-green-300 rounded"></div>
                        <span class="text-gray-600">High (10K-100K)</span>
                    </div>
                    <div class="flex items-center space-x-1">
                        <div class="w-3 h-3 bg-green-600 rounded"></div>
                        <span class="text-gray-600">Very High (&gt;100K)</span>
                    </div>
                </div>
                <div id="calendar-selected-info" class="text-xs text-gray-500">
                    Click on a day to see detailed breakdown
                </div>
            </div>

            <!-- Exchange Breakdown Panel -->
            <div id="calendar-breakdown" class="mt-4 p-3 bg-gray-50 rounded-lg hidden">
                <h4 class="text-sm font-medium text-gray-800 mb-2">Data Points Breakdown for <span id="breakdown-date"></span></h4>
                <div id="breakdown-content" class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
                    <!-- Exchange breakdown will be populated by JavaScript -->
                </div>
            </div>
        </div>

        <!-- Exchange Coverage Analysis -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
            <!-- Exchange Status -->
            <div class="bg-white rounded-lg shadow-md p-4">
                <h2 class="text-lg font-semibold text-gray-900 mb-3">
                    <i class="fas fa-exchange-alt text-blue-600 mr-2"></i>
                    Exchange Coverage
                </h2>
                <div id="exchange-status" class="space-y-2 max-h-48 overflow-y-auto">
                    <!-- Will be populated by JavaScript -->
                </div>
            </div>

            <!-- Date Range Coverage -->
            <div class="bg-white rounded-lg shadow-md p-4">
                <h2 class="text-lg font-semibold text-gray-900 mb-3">
                    <i class="fas fa-calendar-alt text-green-600 mr-2"></i>
                    Date Range Coverage
                </h2>
                <div class="h-48">
                    <canvas id="date-coverage-chart"></canvas>
                </div>
            </div>
        </div>

        <!-- Gap Analysis -->
        <div class="bg-white rounded-lg shadow-md p-4 mb-6">
            <h2 class="text-lg font-semibold text-gray-900 mb-3">
                <i class="fas fa-search text-red-600 mr-2"></i>
                Gap Analysis & Missing Data
            </h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <h3 class="text-base font-medium text-gray-800 mb-2">🔍 Data Completeness</h3>
                    <div id="completeness-analysis" class="space-y-1 max-h-32 overflow-y-auto">
                        <!-- Will be populated by JavaScript -->
                    </div>
                </div>
                <div>
                    <h3 class="text-base font-medium text-gray-800 mb-2">📅 Missing Date Ranges</h3>
                    <div id="missing-ranges" class="space-y-1 max-h-32 overflow-y-auto">
                        <!-- Will be populated by JavaScript -->
                    </div>
                </div>
            </div>
        </div>

        <!-- Data Collection Controls -->
        <div class="bg-white rounded-lg shadow-md p-4 mb-6">
            <h2 class="text-lg font-semibold text-gray-900 mb-3">
                <i class="fas fa-play-circle text-green-600 mr-2"></i>
                Data Collection Controls
            </h2>
            
            <!-- Quick Actions -->
            <div class="mb-4">
                <h3 class="text-base font-medium text-gray-800 mb-2">⚡ Quick Actions</h3>
                <div class="flex flex-wrap gap-2">
                    <button onclick="startCollection()" 
                            class="bg-green-600 hover:bg-green-700 text-white px-3 py-1.5 rounded-md text-xs font-medium transition-colors">
                        <i class="fas fa-play mr-1"></i>Start All Collections
                    </button>
                    <button onclick="startCollection('binance')" 
                            class="bg-yellow-600 hover:bg-yellow-700 text-white px-3 py-1.5 rounded-md text-xs font-medium transition-colors">
                        <i class="fas fa-play mr-1"></i>Start Binance
                    </button>
                    <button onclick="startCollection('bybit')" 
                            class="bg-orange-600 hover:bg-orange-700 text-white px-3 py-1.5 rounded-md text-xs font-medium transition-colors">
                        <i class="fas fa-play mr-1"></i>Start Bybit
                    </button>
                    <button onclick="runAnalysis()" 
                            class="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1.5 rounded-md text-xs font-medium transition-colors">
                        <i class="fas fa-chart-line mr-1"></i>Run Analysis
                    </button>
                    <button onclick="fillGaps()" 
                            class="bg-purple-600 hover:bg-purple-700 text-white px-3 py-1.5 rounded-md text-xs font-medium transition-colors">
                        <i class="fas fa-fill-drip mr-1"></i>Fill Data Gaps
                    </button>
                    <button onclick="refreshDashboard()" 
                            class="bg-gray-600 hover:bg-gray-700 text-white px-3 py-1.5 rounded-md text-xs font-medium transition-colors">
                        <i class="fas fa-sync-alt mr-1"></i>Refresh Now
                    </button>
                </div>
            </div>

            <!-- Custom Collection -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-3">
                <div>
                    <label class="block text-xs font-medium text-gray-700 mb-1">Exchange</label>
                    <select id="custom-exchange" class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <option value="">Select Exchange</option>
                        <option value="binance">Binance</option>
                        <option value="bybit">Bybit</option>
                        <option value="okx">OKX</option>
                        <option value="kraken">Kraken</option>
                        <option value="coinbase">Coinbase</option>
                    </select>
                </div>
                <div>
                    <label class="block text-xs font-medium text-gray-700 mb-1">Start Date</label>
                    <input type="date" id="custom-start-date" 
                           class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                </div>
                <div>
                    <label class="block text-xs font-medium text-gray-700 mb-1">End Date</label>
                    <input type="date" id="custom-end-date" 
                           class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                </div>
            </div>
            <div class="mt-3">
                <button onclick="startCustomCollection()" 
                        class="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-1.5 rounded-md text-xs font-medium transition-colors">
                    <i class="fas fa-rocket mr-1"></i>Start Custom Collection
                </button>
            </div>
        </div>

        <!-- File Browser -->
        <div class="bg-white rounded-lg shadow-md p-4 mb-6">
            <h2 class="text-lg font-semibold text-gray-900 mb-3">
                <i class="fas fa-folder-open text-orange-600 mr-2"></i>
                Data File Browser
            </h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <h3 class="text-base font-medium text-gray-800 mb-2">📁 Browse by Exchange</h3>
                    <div id="file-browser" class="space-y-1 max-h-48 overflow-y-auto">
                        <!-- Will be populated by JavaScript -->
                    </div>
                </div>
                <div>
                    <h3 class="text-base font-medium text-gray-800 mb-2">📊 File Statistics</h3>
                    <div class="h-48">
                        <canvas id="file-stats-chart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Live Logs -->
        <div class="bg-white rounded-lg shadow-md p-4">
            <h2 class="text-lg font-semibold text-gray-900 mb-3">
                <i class="fas fa-file-alt text-blue-600 mr-2"></i>
                Live Collection Logs
            </h2>
            <div id="live-logs" class="bg-gray-900 text-gray-100 p-3 rounded-lg h-48 overflow-y-auto font-mono text-xs">
                <div class="text-gray-400">Waiting for collection logs...</div>
            </div>
        </div>
    </div>

    <script>
        const socket = io();
        let dataCoverage = {};
        let fileStats = {};
        let dateCoverageChart = null;
        let fileStatsChart = null;
        
        // Initialize on page load
        document.addEventListener('DOMContentLoaded', async () => {
            await loadDataAnalysis();
            await loadFileBrowser();
            setupCharts();
            initializeCalendar();
            
            // Set default dates
            const today = new Date();
            const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
            document.getElementById('custom-start-date').value = weekAgo.toISOString().split('T')[0];
            document.getElementById('custom-end-date').value = today.toISOString().split('T')[0];
        });
        
        socket.on('stats_update', (stats) => {
            document.getElementById('total-files').textContent = stats.totalFiles.toLocaleString();
            document.getElementById('total-size').textContent = stats.totalSizeFormatted;
            document.getElementById('active-collectors').textContent = stats.activeCollectors;
            document.getElementById('uptime').textContent = stats.uptimeFormatted;
        });

        socket.on('collection_log', (data) => {
            const logsContainer = document.getElementById('live-logs');
            const logElement = document.createElement('div');
            logElement.className = 'mb-1';
            logElement.innerHTML = `<span class="text-gray-400">[${new Date(data.log.timestamp).toLocaleTimeString()}]</span> ${data.log.message}`;
            
            logsContainer.appendChild(logElement);
            logsContainer.scrollTop = logsContainer.scrollHeight;
        });

        // 🚀 NEW: Real-time analysis updates
        socket.on('analysis_update', (analysis) => {
            console.log('📊 Received analysis update:', analysis);
            displayExchangeStatus(analysis.exchanges || {});
            displayGapAnalysis(analysis.gaps || {});
            updateDateCoverageChart(analysis.dateRanges || {});
            showNotification('Data analysis updated automatically', 'info');
        });

        // 🚀 NEW: File browser updates
        socket.on('files_update', (files) => {
            console.log('📁 Received files update:', files);
            displayFileBrowser(files);
            updateFileStatsChart(files);
        });

        // 🚀 NEW: Exchange status updates (faster than full analysis)
        socket.on('exchange_status_update', (exchanges) => {
            console.log('🔄 Received exchange status update:', exchanges);
            displayExchangeStatus(exchanges);
        });

        // 🚀 NEW: Data change notifications
        socket.on('data_change_notification', (notification) => {
            console.log('📈 Data change detected:', notification.message);
            showNotification(notification.message, notification.type);
            
            // Add visual indicator of live updates
            const indicator = document.createElement('div');
            indicator.className = 'fixed top-20 right-4 bg-green-500 text-white px-3 py-1 rounded-full text-sm animate-pulse';
            indicator.innerHTML = '🔄 Live Update';
            document.body.appendChild(indicator);
            
            setTimeout(() => indicator.remove(), 3000);
        });

        // 🚀 NEW: Collection progress updates
        socket.on('collection_progress', (progress) => {
            console.log('⚡ Collection progress:', progress);
            updateCollectionProgress(progress);
        });

        // 🚀 NEW: Full dashboard refresh
        socket.on('full_dashboard_refresh', (data) => {
            console.log('🔄 Full dashboard refresh:', data.reason);
            
            // Update all sections
            document.getElementById('total-files').textContent = data.stats.totalFiles.toLocaleString();
            document.getElementById('total-size').textContent = data.stats.totalSizeFormatted;
            document.getElementById('active-collectors').textContent = data.stats.activeCollectors;
            document.getElementById('uptime').textContent = data.stats.uptimeFormatted;
            
            displayExchangeStatus(data.analysis.exchanges || {});
            displayGapAnalysis(data.analysis.gaps || {});
            updateDateCoverageChart(data.analysis.dateRanges || {});
            displayFileBrowser(data.files);
            updateFileStatsChart(data.files);
            
            showNotification(`Dashboard refreshed: ${data.reason}`, 'success');
        });

        async function loadDataAnalysis() {
            try {
                const response = await fetch('/api/analyze');
                const analysis = await response.json();
                
                displayExchangeStatus(analysis.exchanges || {});
                displayGapAnalysis(analysis.gaps || {});
                updateDateCoverageChart(analysis.dateRanges || {});
            } catch (error) {
                console.error('Error loading data analysis:', error);
            }
        }

        async function loadFileBrowser() {
            try {
                const response = await fetch('/api/files');
                const files = await response.json();
                
                displayFileBrowser(files);
                updateFileStatsChart(files);
            } catch (error) {
                console.error('Error loading file browser:', error);
            }
        }

        function displayExchangeStatus(exchanges) {
            const container = document.getElementById('exchange-status');
            container.innerHTML = '';
            
            const exchangeList = ['binance', 'bybit', 'okx', 'kraken', 'coinbase', 'gemini', 'bitget', 'mexc'];
            
            exchangeList.forEach(exchange => {
                const data = exchanges[exchange] || { files: 0, coverage: 0 };
                const statusColor = data.files > 0 ? 'green' : 'red';
                const statusIcon = data.files > 0 ? 'check-circle' : 'times-circle';
                
                const div = document.createElement('div');
                div.className = 'flex items-center justify-between p-3 bg-gray-50 rounded-lg';
                div.innerHTML = `
                    <div class="flex items-center">
                        <i class="fas fa-${statusIcon} text-${statusColor}-500 mr-3"></i>
                        <span class="font-medium capitalize">${exchange}</span>
                    </div>
                    <div class="text-sm text-gray-600">
                        ${data.files} files (${data.coverage}% coverage)
                    </div>
                `;
                container.appendChild(div);
            });
        }

        function displayGapAnalysis(gaps) {
            const completenessContainer = document.getElementById('completeness-analysis');
            const missingContainer = document.getElementById('missing-ranges');
            
            completenessContainer.innerHTML = '';
            missingContainer.innerHTML = '';
            
            // Display completeness
            Object.entries(gaps.completeness || {}).forEach(([exchange, percentage]) => {
                const color = percentage > 80 ? 'green' : percentage > 50 ? 'yellow' : 'red';
                const div = document.createElement('div');
                div.className = 'flex items-center justify-between';
                div.innerHTML = `
                    <span class="capitalize">${exchange}</span>
                    <div class="flex items-center">
                        <div class="w-20 bg-gray-200 rounded-full h-2 mr-2">
                            <div class="bg-${color}-500 h-2 rounded-full" style="width: ${percentage}%"></div>
                        </div>
                        <span class="text-sm font-medium">${percentage}%</span>
                    </div>
                `;
                completenessContainer.appendChild(div);
            });
            
            // Display missing ranges
            Object.entries(gaps.missing || {}).forEach(([exchange, ranges]) => {
                ranges.forEach(range => {
                    const div = document.createElement('div');
                    div.className = 'text-sm text-gray-600 bg-red-50 p-2 rounded';
                    div.innerHTML = `
                        <strong class="capitalize">${exchange}:</strong> 
                        ${range.start} to ${range.end}
                        <button onclick="fillSpecificGap('${exchange}', '${range.start}', '${range.end}')" 
                                class="ml-2 text-blue-600 hover:text-blue-800">
                            <i class="fas fa-download"></i> Fill
                        </button>
                    `;
                    missingContainer.appendChild(div);
                });
            });
        }

        function displayFileBrowser(files) {
            const container = document.getElementById('file-browser');
            container.innerHTML = '';
            
            Object.entries(files).forEach(([exchange, exchangeData]) => {
                const div = document.createElement('div');
                div.className = 'border rounded-lg p-3 cursor-pointer hover:bg-gray-50';
                div.onclick = () => toggleExchangeFiles(exchange);
                
                div.innerHTML = `
                    <div class="flex items-center justify-between">
                        <div class="flex items-center">
                            <i class="fas fa-folder text-blue-500 mr-2"></i>
                            <span class="font-medium capitalize">${exchange}</span>
                        </div>
                        <span class="text-sm text-gray-500">${exchangeData.totalFiles || 0} files</span>
                    </div>
                    <div id="files-${exchange}" class="hidden mt-2 ml-6 space-y-1">
                        <!-- Files will be loaded here -->
                    </div>
                `;
                container.appendChild(div);
            });
        }

        function setupCharts() {
            // Date coverage chart will be set up when data is loaded
            // File stats chart will be set up when data is loaded
        }

        function updateDateCoverageChart(dateRanges) {
            const ctx = document.getElementById('date-coverage-chart').getContext('2d');
            
            // Destroy existing chart if it exists
            if (dateCoverageChart) {
                dateCoverageChart.destroy();
            }
            
            // Handle both old and new data formats
            let chartData;
            if (dateRanges.labels && dateRanges.datasets) {
                // New format - direct chart data
                chartData = dateRanges;
            } else {
                // Old format - convert to chart data
                chartData = {
                    labels: Object.keys(dateRanges),
                    datasets: [{
                        label: 'Data Coverage %',
                        data: Object.values(dateRanges),
                        borderColor: 'rgb(59, 130, 246)',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        fill: true
                    }]
                };
            }
            
            dateCoverageChart = new Chart(ctx, {
                type: 'line',
                data: chartData,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            ticks: {
                                callback: function(value) {
                                    return value + '%';
                                }
                            }
                        },
                        x: {
                            ticks: {
                                maxTicksLimit: 10,
                                maxRotation: 45
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return context.dataset.label + ': ' + context.parsed.y + '%';
                                }
                            }
                        }
                    }
                }
            });
        }

        function updateFileStatsChart(files) {
            const ctx = document.getElementById('file-stats-chart').getContext('2d');
            
            // Destroy existing chart if it exists
            if (fileStatsChart) {
                fileStatsChart.destroy();
            }
            
            const labels = Object.keys(files);
            const data = labels.map(exchange => files[exchange].totalFiles || 0);
            
            fileStatsChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: labels.map(l => l.charAt(0).toUpperCase() + l.slice(1)),
                    datasets: [{
                        data: data,
                        backgroundColor: [
                            '#3B82F6', '#10B981', '#F59E0B', '#EF4444',
                            '#8B5CF6', '#06B6D4', '#F97316', '#84CC16'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return context.label + ': ' + context.parsed + ' files';
                                }
                            }
                        }
                    }
                }
            });
        }

        async function startCollection(exchange = null) {
            try {
                const url = exchange ? `/api/start/${exchange}` : '/api/start';
                const response = await fetch(url, { method: 'POST' });
                const result = await response.json();
                
                if (result.success) {
                    showNotification(`Collection started${exchange ? ` for ${exchange}` : ''}`, 'success');
                }
            } catch (error) {
                showNotification('Error starting collection', 'error');
            }
        }

        async function startCustomCollection() {
            const exchange = document.getElementById('custom-exchange').value;
            const startDate = document.getElementById('custom-start-date').value;
            const endDate = document.getElementById('custom-end-date').value;
            
            if (!exchange || !startDate || !endDate) {
                showNotification('Please fill in all fields', 'error');
                return;
            }
            
            try {
                const response = await fetch('/api/start/custom', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ exchange, startDate, endDate })
                });
                
                const result = await response.json();
                if (result.success) {
                    showNotification(`Custom collection started for ${exchange}`, 'success');
                }
            } catch (error) {
                showNotification('Error starting custom collection', 'error');
            }
        }

        async function runAnalysis() {
            try {
                showNotification('Starting data analysis...', 'info');
                const response = await fetch('/api/analyze');
                await loadDataAnalysis(); // Refresh the analysis display
                showNotification('Data analysis completed', 'success');
            } catch (error) {
                showNotification('Analysis failed', 'error');
            }
        }

        async function fillGaps() {
            try {
                showNotification('Starting gap filling process...', 'info');
                const response = await fetch('/api/fill-gaps', { method: 'POST' });
                const result = await response.json();
                
                if (result.success) {
                    showNotification('Gap filling started', 'success');
                    await loadDataAnalysis(); // Refresh analysis
                }
            } catch (error) {
                showNotification('Error starting gap filling', 'error');
            }
        }

        async function fillSpecificGap(exchange, startDate, endDate) {
            try {
                const response = await fetch('/api/fill-gap', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ exchange, startDate, endDate })
                });
                
                const result = await response.json();
                if (result.success) {
                    showNotification(`Filling gap for ${exchange}`, 'success');
                }
            } catch (error) {
                showNotification('Error filling gap', 'error');
            }
        }

        function toggleExchangeFiles(exchange) {
            const filesDiv = document.getElementById(`files-${exchange}`);
            filesDiv.classList.toggle('hidden');
            
            if (!filesDiv.classList.contains('hidden') && filesDiv.children.length === 0) {
                // Load files for this exchange
                loadExchangeFiles(exchange);
            }
        }

        async function loadExchangeFiles(exchange) {
            try {
                const response = await fetch(`/api/files/${exchange}`);
                const files = await response.json();
                
                const container = document.getElementById(`files-${exchange}`);
                container.innerHTML = '';
                
                files.forEach(file => {
                    const div = document.createElement('div');
                    div.className = 'text-sm text-gray-600 flex items-center justify-between';
                    div.innerHTML = `
                        <span><i class="fas fa-file text-gray-400 mr-1"></i>${file.name}</span>
                        <span class="text-xs">${file.size}</span>
                    `;
                    container.appendChild(div);
                });
            } catch (error) {
                console.error('Error loading exchange files:', error);
            }
        }

        function updateCollectionProgress(progress) {
            // Update collection progress indicators
            const activeCollectionsDiv = document.getElementById('active-collectors');
            if (activeCollectionsDiv) {
                // Add pulsing effect to show active collection
                activeCollectionsDiv.parentElement.parentElement.classList.add('animate-pulse');
                setTimeout(() => {
                    activeCollectionsDiv.parentElement.parentElement.classList.remove('animate-pulse');
                }, 2000);
            }
            
            // Log progress for debugging
            console.log(`📊 ${progress.exchange} collection running for ${Math.round(progress.duration / 1000)}s`);
        }

        async function refreshDashboard() {
            try {
                showNotification('Refreshing dashboard...', 'info');
                const response = await fetch('/api/refresh', { method: 'POST' });
                const result = await response.json();
                
                if (result.success) {
                    showNotification('Dashboard refreshed successfully!', 'success');
                } else {
                    showNotification('Refresh failed', 'error');
                }
            } catch (error) {
                showNotification('Error refreshing dashboard', 'error');
            }
        }

        function showNotification(message, type) {
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 ${
                type === 'success' ? 'bg-green-500' :
                type === 'error' ? 'bg-red-500' :
                type === 'info' ? 'bg-blue-500' :
                'bg-gray-500'
            } text-white max-w-sm`;
            
            notification.innerHTML = `
                <div class="flex items-center">
                    <i class="fas fa-${
                        type === 'success' ? 'check-circle' :
                        type === 'error' ? 'exclamation-triangle' :
                        type === 'info' ? 'info-circle' :
                        'bell'
                    } mr-2"></i>
                    <span>${message}</span>
                </div>
            `;
            
            document.body.appendChild(notification);
            
            // Auto-remove after 5 seconds
            setTimeout(() => {
                notification.style.opacity = '0';
                notification.style.transform = 'translateX(100%)';
                setTimeout(() => notification.remove(), 300);
            }, 5000);
        }

        // Calendar functionality
        let currentCalendarDate = new Date();
        let calendarData = {};

        function initializeCalendar() {
            // Set up event listeners
            document.getElementById('calendar-asset').addEventListener('change', loadCalendarData);
            document.getElementById('calendar-prev-month').addEventListener('click', () => {
                currentCalendarDate.setMonth(currentCalendarDate.getMonth() - 1);
                renderCalendar();
                loadCalendarData();
            });
            document.getElementById('calendar-next-month').addEventListener('click', () => {
                currentCalendarDate.setMonth(currentCalendarDate.getMonth() + 1);
                renderCalendar();
                loadCalendarData();
            });

            renderCalendar();
            loadCalendarData();
        }

        function renderCalendar() {
            const monthYear = document.getElementById('calendar-month-year');
            const grid = document.getElementById('calendar-grid');
            
            const year = currentCalendarDate.getFullYear();
            const month = currentCalendarDate.getMonth();
            
            monthYear.textContent = `${currentCalendarDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}`;
            
            // Clear grid
            grid.innerHTML = '';
            
            // Get first day of month and number of days
            const firstDay = new Date(year, month, 1);
            const lastDay = new Date(year, month + 1, 0);
            const daysInMonth = lastDay.getDate();
            const startingDayOfWeek = firstDay.getDay();
            
            // Add empty cells for days before month starts
            for (let i = 0; i < startingDayOfWeek; i++) {
                const cell = document.createElement('div');
                cell.className = 'h-16 border border-gray-200 rounded bg-gray-50';
                grid.appendChild(cell);
            }
            
            // Add days of month
            for (let day = 1; day <= daysInMonth; day++) {
                const cell = document.createElement('div');
                const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
                
                cell.className = 'h-20 border border-gray-200 rounded cursor-pointer hover:bg-gray-50 flex flex-col justify-between p-1 relative';
                cell.setAttribute('data-date', dateStr);
                cell.onclick = () => showDayBreakdown(dateStr);
                
                const dayNumber = document.createElement('div');
                dayNumber.className = 'text-xs font-medium text-gray-700 mb-1';
                dayNumber.textContent = day;
                
                const dataInfo = document.createElement('div');
                dataInfo.className = 'flex-1 flex flex-col justify-center text-center';
                dataInfo.id = `data-info-${dateStr}`;
                
                const dataCount = document.createElement('div');
                dataCount.className = 'text-xs font-bold text-gray-800';
                dataCount.id = `data-count-${dateStr}`;
                
                const timeRange = document.createElement('div');
                timeRange.className = 'text-xs text-gray-500 mt-1 leading-tight';
                timeRange.id = `time-range-${dateStr}`;
                
                const dataIndicator = document.createElement('div');
                dataIndicator.className = 'w-full h-1 rounded mt-1';
                dataIndicator.id = `data-${dateStr}`;
                
                dataInfo.appendChild(dataCount);
                dataInfo.appendChild(timeRange);
                
                cell.appendChild(dayNumber);
                cell.appendChild(dataInfo);
                cell.appendChild(dataIndicator);
                grid.appendChild(cell);
            }
        }

        async function loadCalendarData() {
            const asset = document.getElementById('calendar-asset').value;
            const year = currentCalendarDate.getFullYear();
            const month = currentCalendarDate.getMonth() + 1;
            
            try {
                const response = await fetch(`/api/calendar-data?asset=${asset}&year=${year}&month=${month}`);
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                const data = await response.json();
                calendarData = data || {};
                console.log(`📅 Loaded real calendar data for ${asset} ${year}-${month}:`, Object.keys(calendarData).length, 'days');
                updateCalendarDisplay();
            } catch (error) {
                console.error('❌ Failed to load calendar data:', error);
                calendarData = {};
                updateCalendarDisplay();
                showNotification('Failed to load calendar data - check console for details', 'error');
            }
        }

        function updateCalendarDisplay() {
            Object.keys(calendarData).forEach(dateStr => {
                const cell = document.querySelector(`[data-date="${dateStr}"]`);
                const indicator = document.getElementById(`data-${dateStr}`);
                const dataCount = document.getElementById(`data-count-${dateStr}`);
                const timeRange = document.getElementById(`time-range-${dateStr}`);
                
                if (indicator && dataCount && timeRange && cell) {
                    const dayData = calendarData[dateStr];
                    
                    // Handle both old and new data formats
                    const exchanges = dayData ? (dayData.exchanges || dayData) : {};
                    const totalDataPoints = Object.values(exchanges).reduce((sum, val) => 
                        typeof val === 'number' ? sum + val : sum, 0
                    );
                    
                    // Color coding based on data density
                    let bgColor = 'bg-gray-200'; // No data
                    let textColor = 'text-gray-800';
                    let cellStyle = '';
                    
                    if (totalDataPoints > 0) {
                        // Has data - show normal view
                        cell.onclick = () => showDayBreakdown(dateStr);
                        cell.className = 'h-20 border border-gray-200 rounded cursor-pointer hover:bg-gray-50 flex flex-col justify-between p-1 relative';
                        
                        if (totalDataPoints < 1000) {
                            bgColor = 'bg-red-300';
                            textColor = 'text-red-800';
                        } else if (totalDataPoints < 10000) {
                            bgColor = 'bg-yellow-300';
                            textColor = 'text-yellow-800';
                        } else if (totalDataPoints < 100000) {
                            bgColor = 'bg-green-300';
                            textColor = 'text-green-800';
                        } else {
                            bgColor = 'bg-green-600';
                            textColor = 'text-green-100';
                        }
                    } else {
                        // No data - show call to action
                        const selectedDate = new Date(dateStr);
                        const today = new Date();
                        today.setHours(23, 59, 59, 999); // Set to end of today for proper comparison
                        
                        if (selectedDate <= today) {
                            // Past or current date - show collection action
                            cell.onclick = () => startCollectionForDate(dateStr);
                            cell.className = 'h-20 border-2 border-dashed border-blue-400 rounded cursor-pointer hover:bg-blue-50 hover:border-blue-600 flex flex-col justify-between p-1 relative transition-all';
                            bgColor = 'bg-blue-100';
                            textColor = 'text-blue-800';
                        } else {
                            // Future date - not actionable
                            cell.onclick = null;
                            cell.className = 'h-20 border border-gray-200 rounded flex flex-col justify-between p-1 relative bg-gray-50 cursor-not-allowed';
                            bgColor = 'bg-gray-200';
                            textColor = 'text-gray-400';
                        }
                    }
                    
                    // Update the indicator stripe
                    indicator.className = `w-full h-1 rounded mt-1 ${bgColor}`;
                    
                    // Update data count display
                    if (totalDataPoints > 0) {
                        if (totalDataPoints >= 1000000) {
                            dataCount.textContent = `${(totalDataPoints / 1000000).toFixed(1)}M`;
                        } else if (totalDataPoints >= 1000) {
                            dataCount.textContent = `${(totalDataPoints / 1000).toFixed(1)}K`;
                        } else {
                            dataCount.textContent = totalDataPoints.toString();
                        }
                        dataCount.className = `text-xs font-bold ${textColor}`;
                    } else {
                        const selectedDate = new Date(dateStr);
                        const today = new Date();
                        today.setHours(0, 0, 0, 0);
                        
                        if (selectedDate <= today) {
                            dataCount.textContent = '📥 Collect';
                            dataCount.className = `text-xs font-medium ${textColor} hover:font-bold`;
                        } else {
                            dataCount.textContent = 'Future';
                            dataCount.className = 'text-xs font-medium text-gray-400';
                        }
                    }
                    
                    // Update time range display
                    if (dayData && dayData.timestamps && totalDataPoints > 0) {
                        timeRange.textContent = `${dayData.timestamps.earliestTime}-${dayData.timestamps.latestTime}`;
                        timeRange.className = `text-xs ${textColor.replace('800', '600').replace('100', '200')} mt-1 leading-tight`;
                    } else if (totalDataPoints > 0) {
                        // Fallback for old format
                        timeRange.textContent = 'Full day';
                        timeRange.className = 'text-xs text-gray-500 mt-1 leading-tight';
                    } else {
                        const selectedDate = new Date(dateStr);
                        const today = new Date();
                        today.setHours(0, 0, 0, 0);
                        
                        if (selectedDate <= today) {
                            timeRange.textContent = 'Click to start';
                            timeRange.className = `text-xs ${textColor.replace('800', '600')} mt-1 leading-tight`;
                        } else {
                            timeRange.textContent = '';
                            timeRange.className = 'text-xs text-gray-400 mt-1 leading-tight';
                        }
                    }
                }
            });
            
            // Handle days that aren't in calendarData at all
            const calendarGrid = document.getElementById('calendar-grid');
            const allCells = calendarGrid.querySelectorAll('[data-date]');
            
            allCells.forEach(cell => {
                const dateStr = cell.getAttribute('data-date');
                if (!calendarData[dateStr]) {
                    const indicator = cell.querySelector(`#data-${dateStr}`);
                    const dataCount = cell.querySelector(`#data-count-${dateStr}`);
                    const timeRange = cell.querySelector(`#time-range-${dateStr}`);
                    
                    if (indicator && dataCount && timeRange) {
                        const selectedDate = new Date(dateStr);
                        const today = new Date();
                        today.setHours(0, 0, 0, 0);
                        
                        if (selectedDate <= today) {
                            // Past or current date - show collection action
                            cell.onclick = () => startCollectionForDate(dateStr);
                            cell.className = 'h-20 border-2 border-dashed border-blue-400 rounded cursor-pointer hover:bg-blue-50 hover:border-blue-600 flex flex-col justify-between p-1 relative transition-all';
                            indicator.className = 'w-full h-1 rounded mt-1 bg-blue-100';
                            dataCount.textContent = '📥 Collect';
                            dataCount.className = 'text-xs font-medium text-blue-800 hover:font-bold';
                            timeRange.textContent = 'Click to start';
                            timeRange.className = 'text-xs text-blue-600 mt-1 leading-tight';
                        } else {
                            // Future date - not actionable
                            cell.onclick = null;
                            cell.className = 'h-20 border border-gray-200 rounded flex flex-col justify-between p-1 relative bg-gray-50 cursor-not-allowed';
                            indicator.className = 'w-full h-1 rounded mt-1 bg-gray-200';
                            dataCount.textContent = 'Future';
                            dataCount.className = 'text-xs font-medium text-gray-400';
                            timeRange.textContent = '';
                            timeRange.className = 'text-xs text-gray-400 mt-1 leading-tight';
                        }
                    }
                }
            });
        }

        async function startCollectionForDate(dateStr) {
            const asset = document.getElementById('calendar-asset').value;
            const selectedDate = new Date(dateStr);
            
            // Format date for the API
            const startDate = dateStr;
            const endDate = dateStr; // Same day
            
            // Show confirmation
            const confirmed = confirm(
                `Start collecting historical data for ${asset} on ${selectedDate.toLocaleDateString('en-US', {
                    weekday: 'long',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                })}?`
            );
            
            if (!confirmed) return;
            
            try {
                showNotification(`Starting data collection for ${dateStr}...`, 'info');
                
                // Try all major exchanges for this date
                const exchanges = ['binance', 'bybit', 'okx', 'kraken'];
                const results = [];
                
                for (const exchange of exchanges) {
                    try {
                        const response = await fetch('/api/start/custom', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ 
                                exchange, 
                                startDate, 
                                endDate,
                                asset: asset
                            })
                        });
                        
                        const result = await response.json();
                        if (result.success) {
                            results.push(`${exchange}: ✅ Started`);
                        } else {
                            results.push(`${exchange}: ❌ Failed`);
                        }
                    } catch (error) {
                        results.push(`${exchange}: ❌ Error`);
                        console.error(`Failed to start collection for ${exchange}:`, error);
                    }
                }
                
                const successCount = results.filter(r => r.includes('✅')).length;
                
                if (successCount > 0) {
                    showNotification(
                        `Collection started for ${dateStr} on ${successCount}/${exchanges.length} exchanges. Check logs for progress.`,
                        'success'
                    );
                    
                    // Refresh calendar data in a few seconds to show progress
                    setTimeout(() => {
                        loadCalendarData();
                    }, 3000);
                } else {
                    showNotification(`Failed to start collection for ${dateStr} on any exchange`, 'error');
                }
                
            } catch (error) {
                console.error('Error starting collection for date:', error);
                showNotification(`Error starting collection for ${dateStr}`, 'error');
            }
        }

        function showDayBreakdown(dateStr) {
            const dayData = calendarData[dateStr];
            if (!dayData) return;
            
            const breakdown = document.getElementById('calendar-breakdown');
            const dateSpan = document.getElementById('breakdown-date');
            const content = document.getElementById('breakdown-content');
            
            dateSpan.textContent = new Date(dateStr).toLocaleDateString('en-US', { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
            });
            
            content.innerHTML = '';
            
            Object.entries(dayData).forEach(([exchange, count]) => {
                const card = document.createElement('div');
                card.className = 'bg-white p-2 rounded border text-center';
                
                let bgColor = 'bg-gray-100';
                if (count > 0) {
                    if (count < 1000) bgColor = 'bg-red-100';
                    else if (count < 10000) bgColor = 'bg-yellow-100';
                    else if (count < 50000) bgColor = 'bg-green-100';
                    else bgColor = 'bg-green-200';
                }
                
                card.className += ` ${bgColor}`;
                card.innerHTML = `
                    <div class="text-xs font-medium text-gray-700 capitalize">${exchange}</div>
                    <div class="text-sm font-bold text-gray-900">${count.toLocaleString()}</div>
                `;
                content.appendChild(card);
            });
            
            breakdown.classList.remove('hidden');
            
            // Update info text
            document.getElementById('calendar-selected-info').textContent = 
                `Showing breakdown for ${dateSpan.textContent}`;
        }
    </script>
</body>
</html>
